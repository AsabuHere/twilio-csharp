/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// OauthResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Oauth.V1
{

    public class OauthResource : Resource
    {
        private static Request BuildFetchRequest(FetchOauthOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Oauth,
                "/v1/certs",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Fetches public JWKs
        /// </summary>
        /// <param name="options"> Fetch Oauth parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Oauth </returns>
        public static OauthResource Fetch(FetchOauthOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetches public JWKs
        /// </summary>
        /// <param name="options"> Fetch Oauth parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Oauth </returns>
        public static async System.Threading.Tasks.Task<OauthResource> FetchAsync(FetchOauthOptions options,
                                                                                  ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetches public JWKs
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Oauth </returns>
        public static OauthResource Fetch(ITwilioRestClient client = null)
        {
            var options = new FetchOauthOptions();
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetches public JWKs
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Oauth </returns>
        public static async System.Threading.Tasks.Task<OauthResource> FetchAsync(ITwilioRestClient client = null)
        {
            var options = new FetchOauthOptions();
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a OauthResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> OauthResource object represented by the provided JSON </returns>
        public static OauthResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<OauthResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// A collection of certificates
        /// </summary>
        [JsonProperty("keys")]
        public object Keys { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private OauthResource()
        {

        }
    }

}