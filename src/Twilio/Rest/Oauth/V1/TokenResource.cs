/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// TokenResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Oauth.V1
{

    public class TokenResource : Resource
    {
        private static Request BuildCreateRequest(CreateTokenOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Oauth,
                "/v1/token",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant
        /// </summary>
        /// <param name="options"> Create Token parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Token </returns>
        public static TokenResource Create(CreateTokenOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant
        /// </summary>
        /// <param name="options"> Create Token parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Token </returns>
        public static async System.Threading.Tasks.Task<TokenResource> CreateAsync(CreateTokenOptions options,
                                                                                   ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant
        /// </summary>
        /// <param name="grantType"> A way of representing resource owner's to obtain access token </param>
        /// <param name="clientSid"> A string that uniquely identifies this oauth app </param>
        /// <param name="clientSecret"> The credential for confidential OAuth App </param>
        /// <param name="code"> Jwt token </param>
        /// <param name="codeVerifier"> The cryptographically generated code </param>
        /// <param name="deviceCode"> Jwt token </param>
        /// <param name="refreshToken"> Jwt token </param>
        /// <param name="deviceId"> An Id of device </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Token </returns>
        public static TokenResource Create(string grantType,
                                           string clientSid,
                                           string clientSecret = null,
                                           string code = null,
                                           string codeVerifier = null,
                                           string deviceCode = null,
                                           string refreshToken = null,
                                           string deviceId = null,
                                           ITwilioRestClient client = null)
        {
            var options = new CreateTokenOptions(grantType, clientSid){ClientSecret = clientSecret, Code = code, CodeVerifier = codeVerifier, DeviceCode = deviceCode, RefreshToken = refreshToken, DeviceId = deviceId};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant
        /// </summary>
        /// <param name="grantType"> A way of representing resource owner's to obtain access token </param>
        /// <param name="clientSid"> A string that uniquely identifies this oauth app </param>
        /// <param name="clientSecret"> The credential for confidential OAuth App </param>
        /// <param name="code"> Jwt token </param>
        /// <param name="codeVerifier"> The cryptographically generated code </param>
        /// <param name="deviceCode"> Jwt token </param>
        /// <param name="refreshToken"> Jwt token </param>
        /// <param name="deviceId"> An Id of device </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Token </returns>
        public static async System.Threading.Tasks.Task<TokenResource> CreateAsync(string grantType,
                                                                                   string clientSid,
                                                                                   string clientSecret = null,
                                                                                   string code = null,
                                                                                   string codeVerifier = null,
                                                                                   string deviceCode = null,
                                                                                   string refreshToken = null,
                                                                                   string deviceId = null,
                                                                                   ITwilioRestClient client = null)
        {
            var options = new CreateTokenOptions(grantType, clientSid){ClientSecret = clientSecret, Code = code, CodeVerifier = codeVerifier, DeviceCode = deviceCode, RefreshToken = refreshToken, DeviceId = deviceId};
            return await CreateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a TokenResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> TokenResource object represented by the provided JSON </returns>
        public static TokenResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<TokenResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// Token which carries the necessary information to access a Twilio resource directly
        /// </summary>
        [JsonProperty("access_token")]
        public string AccessToken { get; private set; }
        /// <summary>
        /// Token which carries the information necessary to get a new access token
        /// </summary>
        [JsonProperty("refresh_token")]
        public string RefreshToken { get; private set; }
        /// <summary>
        /// The id_token
        /// </summary>
        [JsonProperty("id_token")]
        public string IdToken { get; private set; }
        /// <summary>
        /// The RFC 2822 date and time in GMT when the refresh token expires
        /// </summary>
        [JsonProperty("refresh_token_expires_at")]
        public DateTime? RefreshTokenExpiresAt { get; private set; }
        /// <summary>
        /// The RFC 2822 date and time in GMT when the access token expires
        /// </summary>
        [JsonProperty("access_token_expires_at")]
        public DateTime? AccessTokenExpiresAt { get; private set; }

        private TokenResource()
        {

        }
    }

}