/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Messaging.V1
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// FetchCampaignOptions
    /// </summary>
    public class FetchCampaignOptions : IOptions<CampaignResource>
    {
        /// <summary>
        /// The SID that identifies the resource to fetch
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchCampaignOptions
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
        public FetchCampaignOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// ReadCampaignOptions
    /// </summary>
    public class ReadCampaignOptions : ReadOptions<CampaignResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// CreateCampaignOptions
    /// </summary>
    public class CreateCampaignOptions : IOptions<CampaignResource>
    {
        /// <summary>
        /// A2P BrandRegistration Sid
        /// </summary>
        public string BrandRegistrationSid { get; }
        /// <summary>
        /// A2P Campaign UseCase.
        /// </summary>
        public string UseCase { get; }
        /// <summary>
        /// A short description of what this SMS campaign does
        /// </summary>
        public string Description { get; }
        /// <summary>
        /// Message samples
        /// </summary>
        public List<string> MessageSamples { get; }
        /// <summary>
        /// Indicate that this SMS campaign will send messages that contain links
        /// </summary>
        public bool? HasEmbeddedLinks { get; }
        /// <summary>
        /// Indicates that this SMS campaign will send messages that contain phone numbers
        /// </summary>
        public bool? HasEmbeddedPhone { get; }
        /// <summary>
        /// MessagingService SID
        /// </summary>
        public string MessagingServiceSid { get; }

        /// <summary>
        /// Construct a new CreateCampaignOptions
        /// </summary>
        /// <param name="brandRegistrationSid"> A2P BrandRegistration Sid </param>
        /// <param name="useCase"> A2P Campaign UseCase. </param>
        /// <param name="description"> A short description of what this SMS campaign does </param>
        /// <param name="messageSamples"> Message samples </param>
        /// <param name="hasEmbeddedLinks"> Indicate that this SMS campaign will send messages that contain links </param>
        /// <param name="hasEmbeddedPhone"> Indicates that this SMS campaign will send messages that contain phone numbers
        ///                        </param>
        /// <param name="messagingServiceSid"> MessagingService SID </param>
        public CreateCampaignOptions(string brandRegistrationSid,
                                     string useCase,
                                     string description,
                                     List<string> messageSamples,
                                     bool? hasEmbeddedLinks,
                                     bool? hasEmbeddedPhone,
                                     string messagingServiceSid)
        {
            BrandRegistrationSid = brandRegistrationSid;
            UseCase = useCase;
            Description = description;
            MessageSamples = messageSamples;
            HasEmbeddedLinks = hasEmbeddedLinks;
            HasEmbeddedPhone = hasEmbeddedPhone;
            MessagingServiceSid = messagingServiceSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (BrandRegistrationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("BrandRegistrationSid", BrandRegistrationSid.ToString()));
            }

            if (UseCase != null)
            {
                p.Add(new KeyValuePair<string, string>("UseCase", UseCase));
            }

            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }

            if (MessageSamples != null)
            {
                p.AddRange(MessageSamples.Select(prop => new KeyValuePair<string, string>("MessageSamples", prop)));
            }

            if (HasEmbeddedLinks != null)
            {
                p.Add(new KeyValuePair<string, string>("HasEmbeddedLinks", HasEmbeddedLinks.Value.ToString().ToLower()));
            }

            if (HasEmbeddedPhone != null)
            {
                p.Add(new KeyValuePair<string, string>("HasEmbeddedPhone", HasEmbeddedPhone.Value.ToString().ToLower()));
            }

            if (MessagingServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("MessagingServiceSid", MessagingServiceSid.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// DeleteCampaignOptions
    /// </summary>
    public class DeleteCampaignOptions : IOptions<CampaignResource>
    {
        /// <summary>
        /// The SID that identifies the resource to delete
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteCampaignOptions
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to delete </param>
        public DeleteCampaignOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}