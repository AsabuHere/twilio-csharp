/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
///
/// CampaignResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Messaging.V1
{

    public class CampaignResource : Resource
    {
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }

            public static readonly StatusEnum Approved = new StatusEnum("approved");
            public static readonly StatusEnum Pending = new StatusEnum("pending");
            public static readonly StatusEnum Failed = new StatusEnum("failed");
        }

        private static Request BuildFetchRequest(FetchCampaignOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Messaging,
                "/v1/a2p/Campaigns/" + options.PathSid + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static CampaignResource Fetch(FetchCampaignOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<CampaignResource> FetchAsync(FetchCampaignOptions options,
                                                                                     ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static CampaignResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchCampaignOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<CampaignResource> FetchAsync(string pathSid,
                                                                                     ITwilioRestClient client = null)
        {
            var options = new FetchCampaignOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadCampaignOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Messaging,
                "/v1/a2p/Campaigns",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static ResourceSet<CampaignResource> Read(ReadCampaignOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<CampaignResource>.FromJson("data", response.Content);
            return new ResourceSet<CampaignResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<CampaignResource>> ReadAsync(ReadCampaignOptions options,
                                                                                                 ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<CampaignResource>.FromJson("data", response.Content);
            return new ResourceSet<CampaignResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static ResourceSet<CampaignResource> Read(int? pageSize = null,
                                                         long? limit = null,
                                                         ITwilioRestClient client = null)
        {
            var options = new ReadCampaignOptions(){PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<CampaignResource>> ReadAsync(int? pageSize = null,
                                                                                                 long? limit = null,
                                                                                                 ITwilioRestClient client = null)
        {
            var options = new ReadCampaignOptions(){PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<CampaignResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<CampaignResource>.FromJson("data", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<CampaignResource> NextPage(Page<CampaignResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Messaging)
            );

            var response = client.Request(request);
            return Page<CampaignResource>.FromJson("data", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<CampaignResource> PreviousPage(Page<CampaignResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Messaging)
            );

            var response = client.Request(request);
            return Page<CampaignResource>.FromJson("data", response.Content);
        }

        private static Request BuildCreateRequest(CreateCampaignOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Messaging,
                "/v1/a2p/Campaigns",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static CampaignResource Create(CreateCampaignOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<CampaignResource> CreateAsync(CreateCampaignOptions options,
                                                                                      ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// create
        /// </summary>
        /// <param name="brandRegistrationSid"> A2P BrandRegistration Sid </param>
        /// <param name="useCase"> A2P Campaign UseCase. </param>
        /// <param name="description"> A short description of what this SMS campaign does </param>
        /// <param name="messageSamples"> Message samples </param>
        /// <param name="hasEmbeddedLinks"> Indicate that this SMS campaign will send messages that contain links </param>
        /// <param name="hasEmbeddedPhone"> Indicates that this SMS campaign will send messages that contain phone numbers
        ///                        </param>
        /// <param name="messagingServiceSid"> MessagingService SID </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static CampaignResource Create(string brandRegistrationSid,
                                              string useCase,
                                              string description,
                                              List<string> messageSamples,
                                              bool? hasEmbeddedLinks,
                                              bool? hasEmbeddedPhone,
                                              string messagingServiceSid,
                                              ITwilioRestClient client = null)
        {
            var options = new CreateCampaignOptions(brandRegistrationSid, useCase, description, messageSamples, hasEmbeddedLinks, hasEmbeddedPhone, messagingServiceSid);
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="brandRegistrationSid"> A2P BrandRegistration Sid </param>
        /// <param name="useCase"> A2P Campaign UseCase. </param>
        /// <param name="description"> A short description of what this SMS campaign does </param>
        /// <param name="messageSamples"> Message samples </param>
        /// <param name="hasEmbeddedLinks"> Indicate that this SMS campaign will send messages that contain links </param>
        /// <param name="hasEmbeddedPhone"> Indicates that this SMS campaign will send messages that contain phone numbers
        ///                        </param>
        /// <param name="messagingServiceSid"> MessagingService SID </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<CampaignResource> CreateAsync(string brandRegistrationSid,
                                                                                      string useCase,
                                                                                      string description,
                                                                                      List<string> messageSamples,
                                                                                      bool? hasEmbeddedLinks,
                                                                                      bool? hasEmbeddedPhone,
                                                                                      string messagingServiceSid,
                                                                                      ITwilioRestClient client = null)
        {
            var options = new CreateCampaignOptions(brandRegistrationSid, useCase, description, messageSamples, hasEmbeddedLinks, hasEmbeddedPhone, messagingServiceSid);
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildDeleteRequest(DeleteCampaignOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Messaging,
                "/v1/a2p/Campaigns/" + options.PathSid + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// delete
        /// </summary>
        /// <param name="options"> Delete Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static bool Delete(DeleteCampaignOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// delete
        /// </summary>
        /// <param name="options"> Delete Campaign parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteCampaignOptions options,
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// delete
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to delete </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Campaign </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteCampaignOptions(pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// delete
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to delete </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Campaign </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteCampaignOptions(pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a CampaignResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> CampaignResource object represented by the provided JSON </returns>
        public static CampaignResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<CampaignResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The SID of the Account that created the resource
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// MessagingService SID
        /// </summary>
        [JsonProperty("messaging_service_sid")]
        public string MessagingServiceSid { get; private set; }
        /// <summary>
        /// A2P BrandRegistration Sid
        /// </summary>
        [JsonProperty("brand_registration_sid")]
        public string BrandRegistrationSid { get; private set; }
        /// <summary>
        /// Campaign sid
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was last updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// A short description of what this SMS campaign does
        /// </summary>
        [JsonProperty("description")]
        public string Description { get; private set; }
        /// <summary>
        /// Message samples
        /// </summary>
        [JsonProperty("message_samples")]
        public List<string> MessageSamples { get; private set; }
        /// <summary>
        /// Campaign status
        /// </summary>
        [JsonProperty("status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public CampaignResource.StatusEnum Status { get; private set; }
        /// <summary>
        /// A reason why campaign registration has failed
        /// </summary>
        [JsonProperty("failure_reason")]
        public string FailureReason { get; private set; }
        /// <summary>
        /// A2P Campaign UseCase.
        /// </summary>
        [JsonProperty("use_case")]
        public string UseCase { get; private set; }
        /// <summary>
        /// Indicate that this SMS campaign will send messages that contain links
        /// </summary>
        [JsonProperty("has_embedded_links")]
        public bool? HasEmbeddedLinks { get; private set; }
        /// <summary>
        /// Indicates that this SMS campaign will send messages that contain phone numbers
        /// </summary>
        [JsonProperty("has_embedded_phone")]
        public bool? HasEmbeddedPhone { get; private set; }
        /// <summary>
        /// The absolute URL of the Campaign resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private CampaignResource()
        {

        }
    }

}