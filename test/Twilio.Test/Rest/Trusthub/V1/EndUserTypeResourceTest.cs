/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using NSubstitute;
using NSubstitute.ExceptionExtensions;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Rest.Trusthub.V1;

namespace Twilio.Tests.Rest.Trusthub.V1
{

    [TestFixture]
    public class EndUserTypeTest : TwilioTest
    {
        [Test]
        public void TestReadRequest()
        {
            var twilioRestClient = Substitute.For<ITwilioRestClient>();
            var request = new Request(
                HttpMethod.Get,
                Twilio.Rest.Domain.Trusthub,
                "/v1/EndUserTypes",
                ""
            );
            twilioRestClient.Request(request).Throws(new ApiException("Server Error, no content"));

            try
            {
                EndUserTypeResource.Read(client: twilioRestClient);
                Assert.Fail("Expected TwilioException to be thrown for 500");
            }
            catch (ApiException) {}
            twilioRestClient.Received().Request(request);
        }

        [Test]
        public void TestReadEmptyResponse()
        {
            var twilioRestClient = Substitute.For<ITwilioRestClient>();
            twilioRestClient.AccountSid.Returns("ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            twilioRestClient.Request(Arg.Any<Request>())
                            .Returns(new Response(
                                         System.Net.HttpStatusCode.OK,
                                         "{\"end_user_types\": [],\"meta\": {\"page\": 0,\"page_size\": 50,\"first_page_url\": \"https://trusthub.twilio.com/v1/EndUserTypes?PageSize=50&Page=0\",\"previous_page_url\": null,\"url\": \"https://trusthub.twilio.com/v1/EndUserTypes?PageSize=50&Page=0\",\"next_page_url\": null,\"key\": \"end_user_types\"}}"
                                     ));

            var response = EndUserTypeResource.Read(client: twilioRestClient);
            Assert.NotNull(response);
        }

        [Test]
        public void TestReadFullResponse()
        {
            var twilioRestClient = Substitute.For<ITwilioRestClient>();
            twilioRestClient.AccountSid.Returns("ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            twilioRestClient.Request(Arg.Any<Request>())
                            .Returns(new Response(
                                         System.Net.HttpStatusCode.OK,
                                         "{\"meta\": {\"page\": 0,\"page_size\": 50,\"first_page_url\": \"https://trusthub.twilio.com/v1/EndUserTypes?PageSize=50&Page=0\",\"previous_page_url\": null,\"url\": \"https://trusthub.twilio.com/v1/EndUserTypes?PageSize=50&Page=0\",\"next_page_url\": null,\"key\": \"end_user_types\"},\"end_user_types\": [{\"url\": \"https://trusthub.twilio.com/v1/EndUserTypes/OYaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"fields\": [{\"machine_name\": \"last_name\",\"friendly_name\": \"Last Name\",\"constraint\": \"String\"},{\"machine_name\": \"email\",\"friendly_name\": \"Email\",\"constraint\": \"String\"},{\"machine_name\": \"first_name\",\"friendly_name\": \"First Name\",\"constraint\": \"String\"},{\"machine_name\": \"business_title\",\"friendly_name\": \"Business Title\",\"constraint\": \"String\"},{\"machine_name\": \"phone_number\",\"friendly_name\": \"Phone Number\",\"constraint\": \"String\"},{\"machine_name\": \"job_position\",\"friendly_name\": \"Job Position\",\"constraint\": \"String\"}],\"machine_name\": \"authorized_representative_1\",\"friendly_name\": \"Authorized Representative one\",\"sid\": \"OYaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}]}"
                                     ));

            var response = EndUserTypeResource.Read(client: twilioRestClient);
            Assert.NotNull(response);
        }

        [Test]
        public void TestFetchRequest()
        {
            var twilioRestClient = Substitute.For<ITwilioRestClient>();
            var request = new Request(
                HttpMethod.Get,
                Twilio.Rest.Domain.Trusthub,
                "/v1/EndUserTypes/OYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                ""
            );
            twilioRestClient.Request(request).Throws(new ApiException("Server Error, no content"));

            try
            {
                EndUserTypeResource.Fetch("OYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", client: twilioRestClient);
                Assert.Fail("Expected TwilioException to be thrown for 500");
            }
            catch (ApiException) {}
            twilioRestClient.Received().Request(request);
        }

        [Test]
        public void TestFetchResponse()
        {
            var twilioRestClient = Substitute.For<ITwilioRestClient>();
            twilioRestClient.AccountSid.Returns("ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            twilioRestClient.Request(Arg.Any<Request>())
                            .Returns(new Response(
                                         System.Net.HttpStatusCode.OK,
                                         "{\"url\": \"https://trusthub.twilio.com/v1/EndUserTypes/OYaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"fields\": [{\"machine_name\": \"last_name\",\"friendly_name\": \"Last Name\",\"constraint\": \"String\"},{\"machine_name\": \"email\",\"friendly_name\": \"Email\",\"constraint\": \"String\"},{\"machine_name\": \"first_name\",\"friendly_name\": \"First Name\",\"constraint\": \"String\"},{\"machine_name\": \"business_title\",\"friendly_name\": \"Business Title\",\"constraint\": \"String\"},{\"machine_name\": \"phone_number\",\"friendly_name\": \"Phone Number\",\"constraint\": \"String\"},{\"machine_name\": \"job_position\",\"friendly_name\": \"Job Position\",\"constraint\": \"String\"}],\"machine_name\": \"authorized_representative_1\",\"friendly_name\": \"Authorized Representative one\",\"sid\": \"OYaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}"
                                     ));

            var response = EndUserTypeResource.Fetch("OYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", client: twilioRestClient);
            Assert.NotNull(response);
        }
    }

}